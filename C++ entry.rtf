{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf760
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red255\green255\blue255;}
{\*\expandedcolortbl;;\csgray\c0;\csgray\c100000;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 I think this problem more than anything else taught me the virtues of looking at other peoples code, to read and learn good coding practice, rather than firing on in and trying to implement code in a way that it turns out is inellegant and foolish.\
\
I began by using the appendix to produce a script to implement the two orbiting algorithms, Leap frog and Range-Kutta, and it was gradually overset by a series of bugs, with fairly questionable fixes. Perhaps better to properly plan an implementation. The code was on the whole not very elegant with some functions which perhaps shouldn\'92t have been created, and caused problems.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f1\fs22 \cf2 \cb3 \CocoaLigature0 0	1.5	2	0.4	0	0	0	2.24605e-314	2.24605e-314	\
Force\
0	1.5	2	0.4	0	0	0	-inf	-inf	\
Potential\
0	1.5	2	0.4	0	0	-inf	-inf	-inf	\
Kinetic\
0	1.5	2	0.4	0	0	-inf	-inf	-inf	\
L\
0	1.5	2	0.4	0	-0.8	-inf	-inf	-inf	\
Pstep\
0	1.9	2	0.4	0	-0.8	-inf	-inf	-inf	\
Vstep\
0	1.9	2	-inf	-inf	-0.8	-inf	-inf	-inf	\
Pstep\
0	-inf	-inf	-inf	-inf	-0.8	-inf	-inf	-inf	\
Force\
0	-inf	-inf	-inf	-inf	-0.8	-inf	nan	nan	\
Pstep\
0	-inf	-inf	-inf	-inf	-0.8	-inf	nan	nan\
\
Is an interesting testing screen to get coming out of a program. Possibly the moral of this story is not to write your code in lots of short bursts in Christmas.\
\
\
The main skills finally learnt from this were the repetitive use of structs, as a way to keep track of a complex system, is very useful, which I suppose leads on to using custom made classes in the future to get the interactions (such as conversions between p and v vectors) associated with the struct.\
\
To be honest sheer buggy-ness prevented me from having time to get on to later tasks, with a clear message \'91WRITE BETTER CODE\'92, being learnt.\
\
\
\
I thought that I would like to get more experience building code from the ground up, so I again decided to write my own stuff for the bonkers code.\
\
There ended up being a sign error in the collision calculation code, which took a while to fix, but taught me to look through the code line by line and check any maths on paper. If this sounds similar to the previous code, I wrote that was because it was written at the same time, so that I could switch between the two when I became bogged down on a bug on one, it turns out that this isn\'92t a great strategy, because then the bugs on each never get fully fixed.\
\
It does however work to bounce two particles, or as far as I know up to N.\
\
So with a lot of time wasted on random and avoidable bugs the same problems crept up.\
\
\
}